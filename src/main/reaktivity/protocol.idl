/*
 * Copyright 2016-2019 The Reaktivity Project
 *
 * The Reaktivity Project licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
scope protocol
{
    option byteorder network;

    scope codec
    {
        struct TlsProtocolVersion
        {
            uint8 major;
            uint8 minor;
        }

        enum TlsContentType (uint8)
        {
            CHANGE_CIPHER_SPEC (20),
            ALERT (21),
            HANDSHAKE (22),
            APPLICATION_DATA (23)
        }

        struct TlsRecordInfo
        {
            uint8 type;
            TlsProtocolVersion version;
            uint16 length;
        }

        enum TlsHandshakeType (uint8)
        {
            HELLO_REQUEST (0),
            CLIENT_HELLO (1),
            SERVER_HELLO (2),
            CERTIFICATE (11),
            SERVER_KEY_EXCHANGE (12),
            CERTIFICATE_REQUEST (13),
            SERVER_HELLO_DONE (14),
            CERTIFICATE_VERIFY (15),
            CLIENT_KEY_EXCHANGE (16),
            FINISHED (20)
        }

        struct TlsHandshake
        {
            uint8 type;
            uint24 length;
            octets[length] body;
        }

        struct TlsRandom
        {
            uint32 epochSeconds;
            octets[28] randomBytes;
        }

        struct TlsVector8
        {
            uint8 length;
            octets[length] data;
        }

        struct TlsVector16
        {
            uint16 length;
            octets[length] data;
        }

        struct TlsClientHello
        {
            TlsProtocolVersion clientVersion;
            TlsRandom random;
            TlsVector8 sessionId;
            TlsVector16 suites;
            TlsVector8 methods;
            octets extensions;
        }

        enum TlsExtensionType (uint16)
        {
            SERVER_NAME (0),
            SIGNATURE_ALGORITHMS (13),
            APPLICATION_LAYER_PROTOCOL_NEGOTIATION (16)
        }

        struct TlsExtension
        {
            uint16 type;
            uint16 length;
            octets[length] data;
        }

        struct TlsServerNameExtension
        {
            TlsVector16 serverNames;
        }

        enum TlsNameType (uint8)
        {
            HOSTNAME (0)
        }

        union TlsServerName switch (uint8)
        {
            case 0:
                string16 hostname;
        }

        struct TlsUnwrappedInfo
        {
            uint16 position = 0;
        }

        struct TlsUnwrappedData
        {
            TlsUnwrappedInfo info;
            uint16 length;
            octets[length] payload;
        }
    }
}
